Promotion : http://zetcode.com/lang/java/datatypes2/
http://www.cs.ukzn.ac.za/~hughm/java/intro/week1/index.html
// https://docs.oracle.com/javase/tutorial/java%nutsandbolts/datatypes.html
Strings = https://livebook.manning.com/book/java-se-11-programmer-i-certification-guide/chapter-5/v-3/11

Bitwise Operators : perform manipulation of individual bits of a number. They can be used with any of the integer types.
	&       Bitwise AND			 (true only all cases are true (1 & 1))
	^       Bitwise exclusive OR (true when one case is true (1^0 || 0^1) and false in the rest (1^1 || 0^0))
	|       Bitwise inclusive OR (true in all cases except when all cases are false (0 | 0)) 

Shift Operators : shift the bits of a number left or right thereby multiplying or dividing the number by two respectively.
They can be used when we have to multiply or divide a number by two
	~       Unary bitwise complement
	<<      Signed left shift
	>>      Signed right shift
	>>>     Unsigned right shift
	
	
	 

Run the app : 
javac src/main/java/run/Run.java && java -cp src/main/java/ run.Run


Tests answers notes: 
-Value of switch cases should be a constant, literal value or final variable
-default value for the transient fields = null
-default locale bundle is used if matching key is not found in specified bundle
-An inner class requires an instance of it's outer class to be instantiated
	-new OuterClass().new InnerClass().innerClassMethod();
	-var outer = new OuterClass();
	 or outer.new InnerClass().innerClassMethod();
-An annotation element must be a primitive, String, Class, enum, another annotation, or an array of these types
-static interface methods are not permitted to call default, abstract, or non-static private interface methods.
-A resource must be marked final or be effectively final to be used in a try-with-resources statement
-Generic wildcards cannot occur on the right side of assignments
// NEW
-You cannot specify the length of the array (new String[3]{ "a", "b", "c"}) when using the initializer block while declaring the array.
-If a parent class declares an args constructor (but not an noArgsConstructor) the child has to explicitly declare an constructor with super()
-Both static and instance initializers are able to access static variables
-Immutable classes properties : not extendable outside the class declaration, data is read but cannot modified by the called
-Inheriting ambiguous fields or methods due to implementing multipe interface does not cause any problem by itself (except in the case of default methods) 
but referring to such fields/methods in an ambiguous way will cause a compile time error.
-A sealed class/interface must have a permits clause.
-HashMap allows both - the key and the value to  be null (but not HashTable)


NIO :
	-Path.resolve() : path.resolve(path2) : combines two paths
		absolute path then path2 is used (overrides the original)
		relative path (f it doesn't start with a root such as c: or / on linux)) then both paths are combined (appends to the original)
		empty path "" the original path is used
Exceptions : 
	-Catch and finally blocks are executed after the resource opened in try-with-resources is closed.
	- no need to catch RuntimeExceptions (like IndexOutOfBoundsException)
Collections :
	-List.subList method returns a view backed by the original list. It doesn't change the existing list. 
		But if you modify the subList, the changes will be visible in the original list. 
	- pay attention to what stream() methods return, is it an intermediate method followed by nothing, is filter() called after xMatch() ?
	- steam().peak() peak performs an action on the elements of the stream :
	it expects a consumer lambda like peek(System.out::println), must be used with terminal operation or it will do nothing.
Modules :
	-To run a module  --module-path and --module options are required : java --module-path course.jar --module com.course.Main
	-Jmod tool has 5 options: create, extract, list, describe, hash.
	-requires transitive <module name> : any module that reads the module containing this clause implicitly also reads the transitive module. 
JDBC :
	-format of a JDBC URL is : jdbc:<subprotocol>:<subname>
	-connection.setAutoCommit(true) will have a side effect of commiting a transaction
	-In JDBC 4.0, if you have the jar file that implements the Driver in the classpath, the Driver is automatically registered.
		DriverManager.getConnection(url, userid, pwd)
	-setNull in PreparedStatement :  
		ps.setString(4, null) = ok for String type but not for others use instead ps.setNull(4, Types.INTEGER)
		if you use setNull with the wrong SQL type of the column SQLException might be thrown (database specific)
	-SQLException will be thrown if the params are not set before executing the query
	-PreparedStatement offers protection against SQL injection attacks over Statement
	-Once a Connection object is closed, you cannot access any of the subsequent objects such as Statement and ResultSet 
		that are retrieved from that Connection.
Dates :
	-Substracting hours from  -GMT timezone is equivalent to adding them (9:00 -6GMT = 9 + 6hours = 15:00 GMT)
Enums : 
	-Enums are allowed to implement interfaces.
	-Enum constants must be declared before anything else.
	-Enum constructor is always implicitly private. You cannot make it public or protected.
	-If an enum type has no constructor declarations, then a private constructor that takes no parameters is automatically provided.
    -enum is implicitly final, which means you cannot extend it. For the same reason, it cannot be sealed.
    -You cannot extend an enum from another enum or class because an enum implicitly extends java.lang.Enum
    -Since enum maintains exactly one instance of its constants, you cannot clone it. You cannot even override the clone method in an enum because 
	java.lang.Enum makes it final.
    -Compiler provides an enum with two public static methods automatically : values() and valueOf(String). 
		values() method returns an array of its constants
		valueOf() method tries to match the String argument exactly (i.e. case sensitive) with an enum constant and returns that constant 
			if successful otherwise it throws java.lang.IllegalArgumentException.
		ordinal() returns the index (starting with 0) of that constant
    	name() returns the name of this enum constant exactly as declared in its enum declaration.
    -By default, an enum's toString() prints the enum name but you can override it to print anything you want.
	-It implements java.lang.Comparable, The natural order of the enum is the order of their ordinal value.
	-Although an enum can be defined inside a method or a constructor, you cannot apply any access modifier such as public to it.
	-Unlike a regular java class, you cannot access a non-final static field from an enum's constructor.
Collections :
	 -Queue is a FIFO structure (add to the end and remove from the front)
	 	offer(e)/add(e)  add an element to the end or tail
		poll()/remove() remove an element from the front or head 
     -Stack is a LIFO structure (add to the front and remove from the front)
	 	push(e) push adds to the front 
		pop() removes from the front.First, 
Class execution order : 
	-Instance initialization order : class static fields, static intializers, instance fields, instance initializers, constructors 
Functional/lambda
	- It does not matter whether the abstract method is declared in this interface or a super interface. 
	There is no constraint on the parameter types or on the return type. 
	The interface may have other default or static methods as well but those are not relevant. 
	All that is required is that it must have exactly one abstract method. 
	-local variables referenced from a lambda expression must be final or effectively final.

-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-




Summarize : 
PreparedStatement has setNull methods:
	void setNull(int parameterIndex, int sqlType) throws SQLException // Sets the designated parameter to SQL NULL.
	Note: You must specify the parameter's SQL type.


